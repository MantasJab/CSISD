/*
 * LibraryGUI.java
 *
 * Created on 28-Sep-2009, 11:55:39
 */
package library;

import java.awt.event.MouseAdapter;
import javax.swing.JOptionPane;
import java.awt.event.MouseEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class LibraryGUI extends javax.swing.JFrame {

    private SetOfMembers theMembers = new SetOfMembers();
    private SetOfBooks holdings = new SetOfBooks();

    /** Creates new form LibraryGUI */
    public LibraryGUI() {

        initComponents();
        memberNo.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    memberNo.setText("");
                } });
        
        memberName.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    memberName.setText("");
                } });
        
        newBookName.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    newBookName.setText("");
                } });
        
        newMemberName.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    newMemberName.setText("");
                } });
        
        List.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent ev) {
                    BookName.setText(List.getSelectedValue().toString());
                } });
        
        Member member1 = new Member("Jane");
        Member member2 = new Member("Amir");
        Member member3 = new Member("Astrid");
        Member member4 = new Member("Andy");

        theMembers.addMember(member1);
        theMembers.addMember(member2);
        theMembers.addMember(member3);
        theMembers.addMember(member4);

        Book book1 = new Book("book1");
        Book book2 = new Book("book2");

        holdings.addBook(book1);
        holdings.addBook(book2);
    }

   
    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Issue = new javax.swing.JButton();
        addMember = new javax.swing.JButton();
        newMemberName = new javax.swing.JTextField();
        newBookName = new javax.swing.JTextField();
        addBook = new javax.swing.JButton();
        memberName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        List = new javax.swing.JList();
        showCatalogue = new javax.swing.JButton();
        returnBook = new javax.swing.JButton();
        javax.swing.JButton ShowMembersBooks = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        memberBooks = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        BookName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        memberNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );

        Issue.setText("Issue");
        Issue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssueActionPerformed(evt);
            }
        });

        addMember.setText("Add a new member");
        addMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberActionPerformed(evt);
            }
        });

        newMemberName.setText("Enter a new member...");
        newMemberName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMemberNameActionPerformed(evt);
            }
        });

        newBookName.setText("Enter a new book...");
        newBookName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBookNameActionPerformed(evt);
            }
        });

        addBook.setText("Add a new book");
        addBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookActionPerformed(evt);
            }
        });

        memberName.setText("Enter a member's name...");
        memberName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberNameActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(List);

        showCatalogue.setText("Show catalogue");
        showCatalogue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCatalogueActionPerformed(evt);
            }
        });

        returnBook.setText("Return selected book");
        returnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookActionPerformed(evt);
            }
        });

        ShowMembersBooks.setText("Show member's books");
        ShowMembersBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowMembersBooksActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(memberBooks);

        jLabel4.setText("Issue a book loan");

        jLabel5.setText("Member's books");

        memberNo.setText("Enter a member's number...");
        memberNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberNoActionPerformed(evt);
            }
        });

        jLabel3.setText("ENTER MEMBER'S DETAILS TO BORROW OR RETURN A BOOK");

        jLabel1.setText("Select a book from the catalogue");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(103, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(newBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addMember, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addBook, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(534, 534, 534))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(showCatalogue)
                                        .addGap(19, 19, 19)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(26, 26, 26)
                                                .addComponent(memberName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel1))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(57, 57, 57)
                                                .addComponent(jLabel4)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(memberNo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BookName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Issue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(returnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(121, 121, 121)
                                        .addComponent(ShowMembersBooks))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(247, 247, 247)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(888, 888, 888))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(newBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newMemberName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMember, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBook, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showCatalogue, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memberName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memberNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ShowMembersBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(returnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BookName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Issue, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(258, 258, 258))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IssueActionPerformed
        String s = memberName.getText(), s2 = memberNo.getText();
        Boolean found = false;
        SetOfBooks books = new SetOfBooks();
        String[] ar = new String[holdings.size()-1];
        if((s.compareTo("Enter a member's name...")==0 || s.compareTo("")==0) && (s2.compareTo("Enter a member's number...")==0 || s2.compareTo("")==0))
        {
            JOptionPane.showMessageDialog(rootPane, "You have to enter member's name or ID number", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else 
            if(s.compareTo("Enter a member's name...")==0 || s.compareTo("")==0)
            {
                for(int i=0; i<Member.getMemberCount(); i++)
                    if(theMembers.get(i).getNumber() == Integer.parseInt(s2))
                    {
                        if(theMembers.get(i).getMemberBooks().size()==3) {
                            JOptionPane.showMessageDialog(null, "The member has too many books on loan to borrow", "Error!", JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            s = BookName.getText();
                            for(int x=0; x<holdings.size(); x++)
                                if(holdings.get(x).toString().compareTo(s)==0)
                                {
                                     theMembers.get(i).borrowBook(holdings.get(x));
                                     holdings.removeBook(x);
                                     BookName.setText("");
                                     for(int n=0; n<ar.length; n++)
                                          ar[n] = holdings.elementAt(n).toString();
                                     List.setListData(ar);
                                     return;
                                }
                        }                         
                    }
            }
        else 
            if(s2.compareTo("Enter a member's number...")==0 || s2.compareTo("")==0)
            {
                for(int j=0; j<Member.getMemberCount(); j++)
                    if(theMembers.get(j).getName().compareToIgnoreCase(s)==0)
                    {
                        if(theMembers.get(j).getMemberBooks().size()==3) {
                            JOptionPane.showMessageDialog(null, "The member has too many books on loan to borrow", "Error!", JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            s = BookName.getText();
                            for(int x=0; x<holdings.size(); x++)
                                if(holdings.get(x).toString().compareTo(s)==0)
                                {
                                     theMembers.get(j).borrowBook(holdings.get(x));
                                     holdings.removeBook(x);
                                     BookName.setText("");
                                     for(int n=0; n<ar.length; n++)
                                          ar[n] = holdings.elementAt(n).toString();
                                     List.setListData(ar);
                                     return;
                                }
                        }
                    }
            }
        else {
                s += " " + s2;
                for(int l=0; l<Member.getMemberCount(); l++)
                    if(theMembers.get(l).toString().compareToIgnoreCase(s)==0)
                    {
                        if(theMembers.get(l).getMemberBooks().size()==3) {
                            JOptionPane.showMessageDialog(null, "The member has too many books on loan to borrow", "Error!", JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            s = BookName.getText();
                            for(int x=0; x<holdings.size(); x++)
                                if(holdings.get(x).toString().compareTo(s)==0)
                                {
                                     theMembers.get(l).borrowBook(holdings.get(x));
                                     holdings.removeBook(x);
                                     BookName.setText("");
                                     for(int n=0; n<ar.length; n++)
                                          ar[n] = holdings.elementAt(n).toString();
                                     List.setListData(ar);
                                     return;
                                }
                        }
                    }
             }
        JOptionPane.showMessageDialog(null, "Specified member cannot be found. Please change member's name or ID number", "Error!", JOptionPane.ERROR_MESSAGE);                                                
        //System.out.println("the button has been pressed");
    }//GEN-LAST:event_IssueActionPerformed

    private void showCatalogueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCatalogueActionPerformed
         String[] ar = new String[holdings.size()];
         for(int i=0; i<ar.length; i++)
             ar[i] = holdings.elementAt(i).toString();
         List.setListData(ar);
    }//GEN-LAST:event_showCatalogueActionPerformed

    private void addMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberActionPerformed
         theMembers.addMember(new Member(newMemberName.getText()));
    }//GEN-LAST:event_addMemberActionPerformed

    private void addBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookActionPerformed
         holdings.addBook(new Book(newBookName.getText()));
    }//GEN-LAST:event_addBookActionPerformed

    private void newBookNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBookNameActionPerformed
         
    }//GEN-LAST:event_newBookNameActionPerformed

    private void newMemberNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMemberNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newMemberNameActionPerformed

    private void memberNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_memberNameActionPerformed

    private void ShowMembersBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowMembersBooksActionPerformed
        String s = memberName.getText(), s2 = memberNo.getText();
        String[] ar = new String[3];
        SetOfBooks books = new SetOfBooks();
        if((s.compareTo("Enter a member's name...")==0 || s.compareTo("")==0) && (s2.compareTo("Enter a member's number...")==0 || s2.compareTo("")==0))
        {
            JOptionPane.showMessageDialog(rootPane, "You have to enter member's name or ID number", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else 
            if(s.compareTo("Enter a member's name...")==0 || s.compareTo("")==0)
            {
                for(int i=0; i<Member.getMemberCount(); i++)
                    if(theMembers.get(i).getNumber() == Integer.parseInt(s2))
                    {
                        books = theMembers.get(i).getMemberBooks();
                        for(int x=0; x<books.size(); x++)
                            ar[x] = books.elementAt(x).toString();
                        memberBooks.setListData(ar);
                        return;
                    }
            }
        else 
            if(s2.compareTo("Enter a member's number...")==0 || s2.compareTo("")==0)
            {
                for(int j=0; j<Member.getMemberCount(); j++)
                    if(theMembers.get(j).getName().compareToIgnoreCase(s)==0)
                    {
                        books = theMembers.get(j).getMemberBooks();
                        for(int x=0; x<books.size(); x++)
                            ar[x] = books.elementAt(x).toString();
                        memberBooks.setListData(ar);
                        return;
                    }
            }
        else {
                s += " " + s2;
                for(int l=0; l<Member.getMemberCount(); l++)
                    if(theMembers.get(l).toString().compareToIgnoreCase(s)==0)
                    {
                        books = theMembers.get(l).getMemberBooks();
                        for(int x=0; x<books.size(); x++)
                            ar[x] = books.elementAt(x).toString();
                        memberBooks.setListData(ar);
                        return;
                    }
             }
        JOptionPane.showMessageDialog(null, "Specified member cannot be found. Please change member's name or ID number", "Error!", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_ShowMembersBooksActionPerformed

    private void memberNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberNoActionPerformed
 
    }//GEN-LAST:event_memberNoActionPerformed

    private void returnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookActionPerformed
      /*  String s = memberName.getText(), s2 = memberNo.getText();
        Boolean found = false;
        SetOfBooks books = new SetOfBooks();
        String[] ar = new String[holdings.size()-1];
        if((s.compareTo("Enter a member's name...")==0 || s.compareTo("")==0) && (s2.compareTo("Enter a member's number...")==0 || s2.compareTo("")==0))
        {
            JOptionPane.showMessageDialog(rootPane, "You have to enter member's name or ID number", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else 
            if(s.compareTo("Enter a member's name...")==0 || s.compareTo("")==0)
            {
                for(int i=0; i<Member.getMemberCount(); i++)
                    if(theMembers.get(i).getNumber() == Integer.parseInt(s2))
                    {
                        if(theMembers.get(i).getMemberBooks().size()==0) {
                            JOptionPane.showMessageDialog(null, "You have no books on loan", "Error!", JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            s = BookName.getText();
                            for(int x=0; x<holdings.size(); x++)
                                if(holdings.get(x).toString().compareTo(s)==0)
                                {
                                    for(int y=0; y<theMembers.get(i).getMemberBooks().size(); y++)
                                    {
                                        if(theMembers.get(i).getMemberBooks().get(y).toString().compareTo(s)==0)
                                        {
                                            holdings.addBook(theMembers.get(i).getMemberBooks().get(y));
                                            theMembers.get(i).returnBook(y);
                                        }
                                    }
                                     theMembers.get(i).returnBook(x);
                                     holdings.removeBook(x);
                                     BookName.setText("");
                                     for(int n=0; n<ar.length; n++)
                                          ar[n] = holdings.elementAt(n).toString();
                                     List.setListData(ar);
                                     return;
                                }
                        }                         
                    }
            }
        else 
            if(s2.compareTo("Enter a member's number...")==0 || s2.compareTo("")==0)
            {
                for(int j=0; j<Member.getMemberCount(); j++)
                    if(theMembers.get(j).getName().compareToIgnoreCase(s)==0)
                    {
                        if(theMembers.get(j).getMemberBooks().size()==0) {
                            JOptionPane.showMessageDialog(null, "The member has too many books on loan to borrow", "Error!", JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            s = BookName.getText();
                            for(int x=0; x<holdings.size(); x++)
                                if(holdings.get(x).toString().compareTo(s)==0)
                                {
                                     theMembers.get(j).borrowBook(holdings.get(x));
                                     holdings.removeBook(x);
                                     BookName.setText("");
                                     for(int n=0; n<ar.length; n++)
                                          ar[n] = holdings.elementAt(n).toString();
                                     List.setListData(ar);
                                     return;
                                }
                        }
                    }
            }
        else {
                s += " " + s2;
                for(int l=0; l<Member.getMemberCount(); l++)
                    if(theMembers.get(l).toString().compareToIgnoreCase(s)==0)
                    {
                        if(theMembers.get(l).getMemberBooks().size()==3) {
                            JOptionPane.showMessageDialog(null, "The member has too many books on loan to borrow", "Error!", JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            s = BookName.getText();
                            for(int x=0; x<holdings.size(); x++)
                                if(holdings.get(x).toString().compareTo(s)==0)
                                {
                                     theMembers.get(l).borrowBook(holdings.get(x));
                                     holdings.removeBook(x);
                                     BookName.setText("");
                                     for(int n=0; n<ar.length; n++)
                                          ar[n] = holdings.elementAt(n).toString();
                                     List.setListData(ar);
                                     return;
                                }
                        }
                    }
             }
        JOptionPane.showMessageDialog(null, "Specified member cannot be found. Please change member's name or ID number", "Error!", JOptionPane.ERROR_MESSAGE);                                                
        //System.out.println("the button has been pressed"); */
    }//GEN-LAST:event_returnBookActionPerformed


    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BookName;
    private javax.swing.JButton Issue;
    private javax.swing.JList List;
    private javax.swing.JButton addBook;
    private javax.swing.JButton addMember;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList memberBooks;
    private javax.swing.JTextField memberName;
    private javax.swing.JTextField memberNo;
    private javax.swing.JTextField newBookName;
    private javax.swing.JTextField newMemberName;
    private javax.swing.JButton returnBook;
    private javax.swing.JButton showCatalogue;
    // End of variables declaration//GEN-END:variables

}
